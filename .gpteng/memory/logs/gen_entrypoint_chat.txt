
2024-09-23T15:57:02.058266
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: package.json
1 {
2   "name": "gpa-calculator-system",
3   "version": "1.0.0",
4   "description": "A comprehensive GPA calculator system for students with user authentication and admin interface.",
5   "main": "src/app.js",
6   "scripts": {
7     "start": "node src/app.js",
8     "dev": "nodemon src/app.js"
9   },
10   "dependencies": {
11     "bcryptjs": "^2.4.3",
12     "body-parser": "^1.19.0",
13     "dotenv": "^10.0.0",
14     "express": "^4.17.1",
15     "jsonwebtoken": "^8.5.1",
16     "mysql2": "^2.2.5"
17   },
18   "devDependencies": {
19     "nodemon": "^2.0.12"
20   },
21   "author": "",
22   "license": "ISC"
23 }

File: requirements.sql
1 CREATE DATABASE gpa_calculator;
2 
3 USE gpa_calculator;
4 
5 CREATE TABLE users (
6     id INT AUTO_INCREMENT PRIMARY KEY,
7     username VARCHAR(50) NOT NULL UNIQUE,
8     password VARCHAR(255) NOT NULL,
9     role ENUM('student', 'admin') NOT NULL
10 );
11 
12 CREATE TABLE courses (
13     id INT AUTO_INCREMENT PRIMARY KEY,
14     user_id INT,
15     course_name VARCHAR(100),
16     course_code VARCHAR(50),
17     credit_hours INT,
18     marks INT,
19     semester VARCHAR(20),
20     FOREIGN KEY (user_id) REFERENCES users(id)
21 );
22 
23 CREATE TABLE transcripts (
24     id INT AUTO_INCREMENT PRIMARY KEY,
25     user_id INT,
26     student_name VARCHAR(100),
27     student_id VARCHAR(50),
28     program VARCHAR(100),
29     contact_info VARCHAR(100),
30     status ENUM('Underprocess', 'Ready to Collect') DEFAULT 'Underprocess',
31     FOREIGN KEY (user_id) REFERENCES users(id)
32 );

File: src/app.js
1 const express = require('express');
2 const bodyParser = require('body-parser');
3 const dotenv = require('dotenv');
4 const userRoutes = require('./routes/userRoutes');
5 const gpaRoutes = require('./routes/gpaRoutes');
6 const transcriptRoutes = require('./routes/transcriptRoutes');
7 const adminRoutes = require('./routes/adminRoutes');
8 const { connectDB } = require('./utils/database');
9 
10 dotenv.config();
11 
12 const app = express();
13 const PORT = process.env.PORT || 3000;
14 
15 app.use(bodyParser.json());
16 
17 app.use('/api/users', userRoutes);
18 app.use('/api/gpa', gpaRoutes);
19 app.use('/api/transcripts', transcriptRoutes);
20 app.use('/api/admin', adminRoutes);
21 
22 connectDB();
23 
24 app.listen(PORT, () => {
25   console.log(`Server is running on port ${PORT}`);
26 });

File: src/utils/database.js
1 const mysql = require('mysql2');
2 const dotenv = require('dotenv');
3 
4 dotenv.config();
5 
6 const pool = mysql.createPool({
7   host: process.env.DB_HOST,
8   user: process.env.DB_USER,
9   password: process.env.DB_PASSWORD,
10   database: process.env.DB_NAME,
11   waitForConnections: true,
12   connectionLimit: 10,
13   queueLimit: 0
14 });
15 
16 const connectDB = () => {
17   pool.getConnection((err, connection) => {
18     if (err) {
19       console.error('Error connecting to the database:', err);
20       process.exit(1);
21     }
22     console.log('Connected to the database');
23     connection.release();
24   });
25 };
26 
27 module.exports = { pool, connectDB };

File: src/utils/jwt.js
1 const jwt = require('jsonwebtoken');
2 const dotenv = require('dotenv');
3 
4 dotenv.config();
5 
6 const generateToken = (user) => {
7   return jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, {
8     expiresIn: '1h'
9   });
10 };
11 
12 const verifyToken = (token) => {
13   return jwt.verify(token, process.env.JWT_SECRET);
14 };
15 
16 module.exports = { generateToken, verifyToken };

File: src/middlewares/authMiddleware.js
1 const jwt = require('jsonwebtoken');
2 const dotenv = require('dotenv');
3 
4 dotenv.config();
5 
6 const authMiddleware = (req, res, next) => {
7   const token = req.header('Authorization').replace('Bearer ', '');
8   if (!token) {
9     return res.status(401).json({ message: 'No token, authorization denied' });
10   }
11 
12   try {
13     const decoded = jwt.verify(token, process.env.JWT_SECRET);
14     req.user = decoded;
15     next();
16   } catch (err) {
17     res.status(401).json({ message: 'Token is not valid' });
18   }
19 };
20 
21 module.exports = authMiddleware;

File: src/models/user.js
1 const { pool } = require('../utils/database');
2 
3 const createUser = (username, password, role) => {
4   return new Promise((resolve, reject) => {
5     pool.query(
6       'INSERT INTO users (username, password, role) VALUES (?, ?, ?)',
7       [username, password, role],
8       (error, results) => {
9         if (error) {
10           return reject(error);
11         }
12         resolve(results.insertId);
13       }
14     );
15   });
16 };
17 
18 const findUserByUsername = (username) => {
19   return new Promise((resolve, reject) => {
20     pool.query(
21       'SELECT * FROM users WHERE username = ?',
22       [username],
23       (error, results) => {
24         if (error) {
25           return reject(error);
26         }
27         resolve(results[0]);
28       }
29     );
30   });
31 };
32 
33 module.exports = { createUser, findUserByUsername };

File: src/models/course.js
1 const { pool } = require('../utils/database');
2 
3 const createCourse = (userId, courseName, courseCode, creditHours, marks, semester) => {
4   return new Promise((resolve, reject) => {
5     pool.query(
6       'INSERT INTO courses (user_id, course_name, course_code, credit_hours, marks, semester) VALUES (?, ?, ?, ?, ?, ?)',
7       [userId, courseName, courseCode, creditHours, marks, semester],
8       (error, results) => {
9         if (error) {
10           return reject(error);
11         }
12         resolve(results.insertId);
13       }
14     );
15   });
16 };
17 
18 const getCoursesByUserId = (userId) => {
19   return new Promise((resolve, reject) => {
20     pool.query(
21       'SELECT * FROM courses WHERE user_id = ?',
22       [userId],
23       (error, results) => {
24         if (error) {
25           return reject(error);
26         }
27         resolve(results);
28       }
29     );
30   });
31 };
32 
33 module.exports = { createCourse, getCoursesByUserId };

File: src/models/transcript.js
1 const { pool } = require('../utils/database');
2 
3 const createTranscript = (userId, studentName, studentId, program, contactInfo) => {
4   return new Promise((resolve, reject) => {
5     pool.query(
6       'INSERT INTO transcripts (user_id, student_name, student_id, program, contact_info) VALUES (?, ?, ?, ?, ?)',
7       [userId, studentName, studentId, program, contactInfo],
8       (error, results) => {
9         if (error) {
10           return reject(error);
11         }
12         resolve(results.insertId);
13       }
14     );
15   });
16 };
17 
18 const getTranscripts = () => {
19   return new Promise((resolve, reject) => {
20     pool.query('SELECT * FROM transcripts', (error, results) => {
21       if (error) {
22         return reject(error);
23       }
24       resolve(results);
25     });
26   });
27 };
28 
29 const updateTranscriptStatus = (id, status) => {
30   return new Promise((resolve, reject) => {
31     pool.query(
32       'UPDATE transcripts SET status = ? WHERE id = ?',
33       [status, id],
34       (error, results) => {
35         if (error) {
36           return reject(error);
37         }
38         resolve(results);
39       }
40     );
41   });
42 };
43 
44 const deleteTranscript = (id) => {
45   return new Promise((resolve, reject) => {
46     pool.query('DELETE FROM transcripts WHERE id = ?', [id], (error, results) => {
47       if (error) {
48         return reject(error);
49       }
50       resolve(results);
51     });
52   });
53 };
54 
55 module.exports = { createTranscript, getTranscripts, updateTranscriptStatus, deleteTranscript };

File: src/controllers/userController.js
1 const bcrypt = require('bcryptjs');
2 const { createUser, findUserByUsername } = require('../models/user');
3 const { generateToken } = require('../utils/jwt');
4 
5 const register = async (req, res) => {
6   const { username, password, role } = req.body;
7 
8   try {
9     const hashedPassword = await bcrypt.hash(password, 10);
10     const userId = await createUser(username, hashedPassword, role);
11     res.status(201).json({ userId });
12   } catch (error) {
13     res.status(500).json({ message: 'Error registering user', error });
14   }
15 };
16 
17 const login = async (req, res) => {
18   const { username, password } = req.body;
19 
20   try {
21     const user = await findUserByUsername(username);
22     if (!user) {
23       return res.status(400).json({ message: 'Invalid credentials' });
24     }
25 
26     const isMatch = await bcrypt.compare(password, user.password);
27     if (!isMatch) {
28       return res.status(400).json({ message: 'Invalid credentials' });
29     }
30 
31     const token = generateToken(user);
32     res.json({ token });
33   } catch (error) {
34     res.status(500).json({ message: 'Error logging in', error });
35   }
36 };
37 
38 module.exports = { register, login };

File: src/controllers/gpaController.js
1 const { createCourse, getCoursesByUserId } = require('../models/course');
2 
3 const calculateGPA = async (req, res) => {
4   const { courses } = req.body;
5   const userId = req.user.id;
6 
7   try {
8     for (const course of courses) {
9       await createCourse(userId, course.courseName, course.courseCode, course.creditHours, course.marks, course.semester);
10     }
11 
12     const userCourses = await getCoursesByUserId(userId);
13     const gpa = calculateGPAFromCourses(userCourses);
14     res.json({ gpa });
15   } catch (error) {
16     res.status(500).json({ message: 'Error calculating GPA', error });
17   }
18 };
19 
20 const calculateGPAFromCourses = (courses) => {
21   let totalPoints = 0;
22   let totalCredits = 0;
23 
24   for (const course of courses) {
25     const gradePoint = getGradePoint(course.marks);
26     totalPoints += gradePoint * course.creditHours;
27     totalCredits += course.creditHours;
28   }
29 
30   return totalPoints / totalCredits;
31 };
32 
33 const getGradePoint = (marks) => {
34   if (marks >= 85) return 4.0;
35   if (marks >= 80) return 3.7;
36   if (marks >= 75) return 3.3;
37   if (marks >= 71) return 3.0;
38   if (marks >= 68) return 2.7;
39   if (marks >= 64) return 2.3;
40   if (marks >= 60) return 2.0;
41   if (marks >= 57) return 1.7;
42   if (marks >= 53) return 1.3;
43   if (marks >= 50) return 1.0;
44   return 0.0;
45 };
46 
47 module.exports = { calculateGPA };

File: src/controllers/transcriptController.js
1 const { createTranscript } = require('../models/transcript');
2 
3 const submitTranscriptApplication = async (req, res) => {
4   const { studentName, studentId, program, contactInfo } = req.body;
5   const userId = req.user.id;
6 
7   try {
8     const transcriptId = await createTranscript(userId, studentName, studentId, program, contactInfo);
9     res.status(201).json({ transcriptId });
10   } catch (error) {
11     res.status(500).json({ message: 'Error submitting transcript application', error });
12   }
13 };
14 
15 module.exports = { submitTranscriptApplication };

File: src/controllers/adminController.js
1 const { getTranscripts, updateTranscriptStatus, deleteTranscript } = require('../models/transcript');
2 
3 const viewApplications = async (req, res) => {
4   try {
5     const transcripts = await getTranscripts();
6     res.json(transcripts);
7   } catch (error) {
8     res.status(500).json({ message: 'Error fetching transcript applications', error });
9   }
10 };
11 
12 const updateApplicationStatus = async (req, res) => {
13   const { id, status } = req.body;
14 
15   try {
16     await updateTranscriptStatus(id, status);
17     res.json({ message: 'Application status updated' });
18   } catch (error) {
19     res.status(500).json({ message: 'Error updating application status', error });
20   }
21 };
22 
23 const deleteApplication = async (req, res) => {
24   const { id } = req.body;
25 
26   try {
27     await deleteTranscript(id);
28     res.json({ message: 'Application deleted' });
29   } catch (error) {
30     res.status(500).json({ message: 'Error deleting application', error });
31   }
32 };
33 
34 module.exports = { viewApplications, updateApplicationStatus, deleteApplication };

File: src/routes/userRoutes.js
1 const express = require('express');
2 const { register, login } = require('../controllers/userController');
3 
4 const router = express.Router();
5 
6 router.post('/register', register);
7 router.post('/login', login);
8 
9 module.exports = router;

File: src/routes/gpaRoutes.js
1 const express = require('express');
2 const { calculateGPA } = require('../controllers/gpaController');
3 const authMiddleware = require('../middlewares/authMiddleware');
4 
5 const router = express.Router();
6 
7 router.post('/calculate', authMiddleware, calculateGPA);
8 
9 module.exports = router;

File: src/routes/transcriptRoutes.js
1 const express = require('express');
2 const { submitTranscriptApplication } = require('../controllers/transcriptController');
3 const authMiddleware = require('../middlewares/authMiddleware');
4 
5 const router = express.Router();
6 
7 router.post('/submit', authMiddleware, submitTranscriptApplication);
8 
9 module.exports = router;

File: src/routes/adminRoutes.js
1 const express = require('express');
2 const { viewApplications, updateApplicationStatus, deleteApplication } = require('../controllers/adminController');
3 const authMiddleware = require('../middlewares/authMiddleware');
4 
5 const router = express.Router();
6 
7 router.get('/applications', authMiddleware, viewApplications);
8 router.put('/applications/status', authMiddleware, updateApplicationStatus);
9 router.delete('/applications', authMiddleware, deleteApplication);
10 
11 module.exports = router;

File: src/config.js
1 module.exports = {
2   jwtSecret: process.env.JWT_SECRET,
3   db: {
4     host: process.env.DB_HOST,
5     user: process.env.DB_USER,
6     password: process.env.DB_PASSWORD,
7     database: process.env.DB_NAME
8   }
9 };

```

================================== Ai Message ==================================

```sh
#!/bin/bash

# Install dependencies
npm install

# Run the application
npm run start
```
